#Com o comando aov(), o R gera a tabela da ANOVA completa
anova <- aov(Gastos~ #Variável resposta
Estado_Civil, #Fator que queremos testar se exerce influencia na variável resposta
data = dados_anova)
#Visualize a tabela da ANOVA. Observe o F calculado e o valor p ( Pr > F)
summary(anova)
# O valor p é praticamente zero. Mesmo que nosso nível de confiança fosse 99,9% ainda teríamos evidências para rejeitar H0
rm(list = ls()) #Limpa memória do R
install.packages('plotly')
library(ggplot2) #Biblioteca pra gerar visualizacoes mais sofisticadas
library(plotly) #Biblioteca pra gerar visualizacoes mais sofisticadas
#Cria o data frame
dados <- data.frame(Vendas_Cafe = c(18, 20, 23, 23, 23, 23, 24, 25, 26, 26, 26, 26, 27, 28, 28,
29, 29, 30, 30, 31, 31, 33, 34, 35, 38, 39, 41, 44, 44, 46),
Preco_Cafe = c(4.77, 4.67, 4.75, 4.74, 4.63, 4.56, 4.59, 4.75, 4.75, 4.49,
4.41, 4.32, 4.68, 4.66, 4.42, 4.71, 4.66, 4.46, 4.36, 4.47, 4.43,
4.4, 4.61, 4.09, 3.73, 3.89, 4.35, 3.84, 3.81, 3.79),
Promocao = c("Nao", "Nao", "Nao", "Nao", "Nao", "Nao", "Nao", "Nao", "Sim",
"Nao", "Sim", "Nao", "Nao", "Sim", "Sim", "Nao", "Sim", "Sim",
"Sim", "Nao", "Nao", "Sim", "Sim", "Sim", "Nao", "Sim", "Sim",
"Sim", "Sim", "Sim"),
Preco_Leite = c(4.74, 4.81, 4.36, 4.29, 4.17, 4.66, 4.73, 4.11, 4.21, 4.25,
4.62, 4.53, 4.44, 4.19, 4.37, 4.29, 4.57, 4.21, 4.77, 4, 4.31,
4.34, 4.05, 4.73, 4.07, 4.75, 4, 4.15, 4.34, 4.15) )
View(dados)
plot(y = dados$Vendas_Cafe,
x = dados$Preco_Cafe,
main = 'Relação entre Vendas do Café VS Preço do Café',
xlab = 'Preço do Café',
ylab = 'Qtde Vendida do Café',
pch = 16)
grid()
g1 <- ggplot(data = dados, aes(y = Vendas_Cafe, x = Preco_Cafe)) + geom_point()
g1 + geom_smooth(method = 'lm')
ggplotly(g1) #este comando vem da biblioteca plotly. Passe o cursor do mouse no pontos do gráfico
cor(dados$Vendas_Cafe, dados$Preco_Cafe) #Observe que é o mesmo valor que calculamos na apostila
plot(y = dados$Vendas_Cafe,
x = dados$Preco_Leite,
main = 'Relação entre Vendas do Café VS Preço do Leite',
xlab = 'Preço do Leite',
ylab = 'Qtde Vendida do Café',
pch = 16)
grid()
cor(dados$Preco_Leite, dados$Vendas_Cafe)
plot_ly(dados, z = ~Vendas_Cafe,
x = ~Preco_Cafe,
y = ~Preco_Leite) %>% add_markers()
boxplot(dados$Vendas_Cafe ~ dados$Promocao)
g2 <- ggplot(data = dados, aes(y = Vendas_Cafe, x = Promocao, col = Promocao)) +
geom_boxplot()
ggplotly(g2)
par(mfrow = c(2,2))
plot(y = dados$Vendas_Cafe,
x = dados$Preco_Cafe,
pch = 16,
main = 'Vendas Cafe vs Preco Cafe')
plot(y = dados$Vendas_Cafe,
x = dados$Preco_Leite,
pch = 16,
main = 'Vendas Cafe vs Preco Leite')
boxplot(dados$Vendas_Cafe ~ dados$Promocao,
main = 'Vendas Cafe vs Promocao')
hist(dados$Vendas_Cafe,
main = 'Distribuicao das vendas do cafe')
dev.off()
summary(dados)
modelo <- lm(Vendas_Cafe ~ Preco_Cafe + Preco_Leite + Promocao, data = dados)
#Visualiza resumo do ajuste do modelo
summary(modelo)
par(mfrow = c(2,2))
plot(modelo,pch = 16)
dev.off()
dados_para_predicao <- data.frame(Preco_Cafe = c(4.77, 4.67, 4.75),
Promocao = c("Nao", "Nao", "Sim"),
Preco_Leite = c(4.74, 4.81, 4.36) )
View(dados_para_predicao)
predicoes <- predict(modelo, newdata = dados_para_predicao)
View (data.frame(dados_para_predicao, predicoes))
nova_variavel = rpois(n = 30, lambda = 2)
fit2 <- lm(Vendas_Cafe ~
Preco_Cafe +
Promocao +
Preco_Leite +
nova_variavel, data = dados)
summary(fit2) #Observe o p valor da nova variavel, nao e significativo
fit2 <- step(fit2, direction = 'both')
summary(fit2) #Observe que o stepwise removeu a nova variavel
rm(list = ls()) #Limpa memória do R
#Instala e carrega biblioteca para gerar a curva ROC
install.packages('pROC')
library(pROC) #Carrega
#Monte o dataset
dados <- data.frame(Prova_Logica = c(2, 2, 5, 5, 5, 2, 3, 2, 1, 4,
5, 8, 1, 1, 3, 4, 3, 2, 1, 1, 8, 8, 1, 2, 1, 5, 3, 3, 5, 4, 4,
1, 8, 3, 2, 3, 3, 2, 1, 1, 5, 4, 1, 5, 3, 1, 4, 6, 1, 1, 8, 1,
1, 5, 1, 5, 3, 1, 1, 8, 1, 1, 1, 1, 1, 2, 1, 5, 5, 4, 2, 1, 8,
4, 5, 1, 3, 3, 3, 5, 3, 1, 7, 1, 1, 2, 9, 5, 3, 1, 5, 1, 4, 2,
1, 4, 3, 3, 8, 1, 1, 8, 5, 1, 1, 1, 5, 8, 5, 1, 4, 2, 5, 4, 5,
3, 3, 5, 5, 5, 5, 5, 8, 5, 4, 9, 8, 1, 3, 4, 2, 5, 1, 4, 3, 5,
5, 5, 6, 4, 3, 5, 7, 1, 8, 5, 7, 3, 2, 3, 2, 5, 5, 5, 5, 4, 4,
8, 1, 1, 2, 5, 3, 2, 7, 4, 1, 1, 1, 4, 5, 1, 1, 8, 3, 6, 8, 3,
1, 3, 3, 2, 8, 4, 1, 1, 1, 1, 1, 2, 3, 4, 6, 2, 3, 3, 4, 2, 1,
5, 2, 4, 3, 3, 1, 3, 3, 3, 1, 3, 5, 6, 1, 5, 1, 5, 4, 3, 1, 6,
1, 4, 9, 3, 3, 2, 1, 1, 4, 3, 1, 3, 1, 1, 3, 7, 8, 1, 3, 5, 6,
3, 6, 5, 8, 5, 1, 1, 4, 2, 1, 8, 7, 5, 1, 1, 1, 6, 5, 7, 3, 3,
5, 1, 3, 5, 1, 8, 8, 1, 2, 3, 3, 3, 3, 7, 1, 9, 8, 4, 1, 7, 1,
1, 1, 5, 1, 1, 5, 3, 5, 1, 3, 6, 2, 1, 3, 4, 5, 6, 1, 5, 1, 5,
1, 1, 5, 1, 1, 1, 5, 1, 3, 7, 1, 4, 3, 7, 1, 1, 5, 4, 1, 1, 3,
5, 4, 2, 1, 5, 1, 1, 1, 8, 8, 5, 1, 2, 1, 6, 8, 3, 1, 5, 1, 5,
1, 4, 4, 8, 1, 1, 1, 5, 1, 1, 5, 4, 6, 8, 1, 3, 1, 6, 1, 1, 1,
1, 1, 8, 1, 5, 3, 1, 4, 4, 7, 2, 3, 3, 5, 8, 3, 1, 4, 1, 5, 1,
7, 2, 6, 4, 1, 3, 1, 8, 5, 5, 5, 3, 1, 4, 5, 3, 6, 1, 3, 3, 5,
4, 5, 3, 1, 4, 5, 1, 3, 6, 1, 1, 1, 3, 1, 1, 1, 1, 3, 1, 5, 4,
8, 1, 5, 6, 6, 4, 2, 5, 5, 6, 1, 2, 5, 6, 4, 2, 1, 2, 7, 2, 8,
1, 3, 1, 1, 1, 6, 1, 4, 3, 1, 5, 2, 1, 1, 5, 4, 3, 1, 3, 1, 1,
2, 4, 5, 4, 5, 4, 3, 7, 4, 1, 7, 1, 8, 5, 3, 3, 5, 1, 2, 1, 5,
4, 4, 4, 3, 6, 8, 8, 1, 1, 1, 8, 8, 1, 5, 1, 4, 5, 1, 4, 1, 4,
1, 5, 1, 4, 4, 1, 1, 2, 5, 1, 4, 4, 5, 4, 1, 1, 5, 3, 5, 4, 1,
1, 5, 3, 3, 1, 5, 5, 4, 5, 7, 2, 5, 9, 4, 6, 1, 1, 1, 1, 8, 7,
2, 3, 2, 9, 3, 1, 5, 1, 3, 5, 1, 4, 6, 3, 1, 5, 1, 3, 9, 1, 4,
8, 8, 1, 3, 2, 3, 3, 1, 5, 1, 1, 3, 1, 5, 3, 4, 3, 4, 1, 4, 3,
5, 1, 5, 2, 5, 8, 9, 4, 7, 4, 8, 5, 7, 5, 3, 5, 6, 3, 1, 5, 6,
4, 3, 5, 1, 2, 4, 1, 1, 2, 9, 5, 1, 5, 1, 2, 1, 5, 1, 2, 3, 5,
1, 1, 5, 3, 9, 5, 6, 9, 6, 1, 1, 9, 1, 3, 5, 4, 8, 4, 2, 7, 1,
6, 3, 7, 8, 1, 5, 5, 6, 1, 4, 4, 3, 1, 5, 5, 8, 3, 3, 1, 9, 5,
5, 5, 5, 1, 9, 6, 3, 1, 1, 2, 4, 6, 5, 7, 6, 5, 1), Redacao = c(1,
1, 1, 4, 3, 3, 5, 5, 9, 1, 1, 1, 1, 1, 4, 3, 3, 1, 1, 1, 1, 7,
1, 1, 8, 1, 1, 1, 3, 8, 3, 1, 5, 3, 3, 1, 2, 7, 1, 1, 1, 1, 1,
1, 7, 1, 1, 8, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 8, 5,
1, 1, 1, 1, 1, 2, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 4, 1, 8, 5, 1,
5, 8, 1, 1, 1, 5, 1, 1, 1, 2, 3, 3, 1, 3, 8, 1, 4, 6, 1, 1, 1,
1, 3, 1, 1, 2, 3, 2, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1, 8, 1, 5,
1, 1, 1, 1, 1, 3, 6, 1, 2, 5, 6, 1, 2, 2, 1, 8, 1, 4, 6, 9, 3,
1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 6, 1, 1, 1, 1,
1, 3, 5, 1, 1, 1, 1, 3, 1, 4, 1, 1, 1, 2, 1, 3, 1, 1, 1, 4, 5,
1, 1, 6, 1, 3, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
6, 1, 8, 1, 1, 5, 1, 8, 2, 6, 1, 5, 1, 6, 1, 1, 1, 1, 1, 1, 1,
1, 3, 1, 4, 8, 1, 1, 1, 8, 1, 3, 1, 6, 3, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 5, 1, 1, 3, 1, 1, 7, 4, 1, 1, 1, 1, 6, 1, 3,
1, 4, 1, 1, 7, 2, 6, 4, 1, 1, 1, 1, 1, 4, 7, 1, 3, 1, 1, 9, 1,
1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 3, 1, 1, 3, 2, 1, 1, 1, 5, 3, 1,
1, 2, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 8, 1, 7, 1,
1, 3, 8, 1, 1, 1, 1, 1, 4, 1, 1, 1, 2, 2, 7, 1, 3, 1, 1, 1, 4,
2, 4, 2, 2, 5, 3, 1, 1, 1, 5, 1, 9, 1, 1, 3, 2, 1, 1, 5, 1, 2,
1, 3, 8, 1, 5, 1, 4, 3, 1, 8, 1, 6, 5, 1, 1, 1, 1, 1, 4, 5, 1,
7, 8, 1, 4, 1, 1, 1, 1, 4, 1, 1, 2, 1, 8, 2, 6, 2, 1, 4, 1, 1,
1, 1, 1, 4, 1, 1, 1, 1, 1, 8, 1, 1, 1, 3, 1, 1, 1, 8, 1, 1, 1,
3, 1, 1, 1, 1, 1, 6, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1,
3, 1, 2, 7, 2, 1, 1, 1, 1, 1, 2, 2, 1, 3, 1, 1, 3, 1, 1, 5, 1,
7, 1, 1, 1, 3, 6, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 6, 8, 8, 7, 2,
1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 5, 1, 1, 1, 1, 9, 1, 8, 1, 1, 2,
4, 1, 1, 6, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 6, 1, 2,
1, 1, 5, 4, 1, 8, 4, 6, 6, 1, 1, 1, 9, 1, 1, 1, 1, 1, 8, 1, 1,
1, 1, 1, 3, 1, 1, 4, 1, 1, 3, 4, 1, 1, 3, 2, 3, 1, 2, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 4, 1, 4, 2, 1, 6, 1,
4, 2, 2, 1, 1, 1, 4, 1, 1, 1, 1, 1, 6, 1, 1, 1, 3, 2, 8, 1, 1,
1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 6, 1, 6, 7, 1, 1, 5, 1, 2, 5,
1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 1, 8, 7, 1, 1, 1, 1, 4, 1, 6, 1,
2, 8, 4, 7, 1, 1, 1, 5, 1, 1, 2, 1, 1, 7, 1, 1, 1, 4, 1, 1, 3,
1, 5, 1, 7, 1), Auto_Avaliacao = c(1, 1, 1, 1, 1, 1, 1, 7, 1,
1, 1, 9, 1, 1, 1, 3, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 3, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 8, 1, 1, 9, 7, 1, 2,
1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 3, 8, 1, 1, 1, 1, 1, 1, 6, 1, 1,
1, 2, 1, 1, 1, 1, 1, 1, 3, 1, 8, 3, 1, 6, 1, 6, 1, 1, 3, 1, 1,
1, 1, 8, 5, 3, 3, 1, 1, 3, 1, 1, 1, 1, 1, 6, 1, 2, 1, 1, 1, 1,
1, 4, 1, 6, 1, 1, 1, 2, 3, 1, 4, 7, 6, 1, 1, 1, 1, 1, 1, 9, 1,
2, 1, 1, 1, 1, 2, 1, 8, 1, 8, 1, 3, 2, 1, 1, 1, 1, 2, 6, 1, 1,
1, 2, 1, 3, 1, 1, 8, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9,
1, 5, 1, 1, 1, 1, 1, 5, 1, 1, 1, 3, 5, 1, 1, 1, 1, 1, 1, 3, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 6, 1, 8, 1, 2, 5, 2, 1,
1, 7, 1, 1, 1, 8, 1, 1, 5, 1, 1, 1, 3, 1, 1, 1, 9, 1, 1, 1, 5,
9, 1, 5, 3, 4, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 3, 3, 1, 3, 1,
1, 1, 1, 1, 1, 3, 8, 1, 4, 1, 4, 1, 1, 1, 6, 1, 3, 1, 1, 2, 3,
1, 1, 1, 1, 1, 1, 1, 1, 9, 1, 1, 2, 2, 8, 1, 1, 1, 1, 1, 4, 1,
1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 4, 3, 1, 1, 4, 1, 6, 2, 1, 5, 3,
1, 1, 2, 1, 1, 1, 1, 1, 1, 8, 3, 4, 8, 1, 3, 7, 7, 1, 1, 2, 1,
1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 9, 1, 1, 1,
1, 8, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 9, 6, 3, 3,
1, 2, 1, 8, 7, 1, 1, 1, 1, 1, 6, 3, 1, 4, 5, 1, 6, 1, 1, 1, 1,
3, 1, 1, 2, 1, 6, 3, 7, 1, 8, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 8, 1, 1, 1, 9, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 6, 1, 1, 1, 1, 1, 1, 2,
1, 1, 1, 2, 1, 7, 1, 1, 4, 2, 1, 5, 1, 5, 1, 1, 1, 4, 6, 1, 1,
4, 1, 2, 1, 1, 1, 9, 8, 1, 9, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1,
1, 1, 4, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 3, 1, 1, 8, 1, 1, 6, 1,
1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 5, 1, 6, 3, 1, 4, 3, 1, 7, 5, 1,
1, 1, 1, 1, 1, 2, 1, 5, 9, 1, 1, 1, 2, 1, 1, 1, 1, 3, 1, 8, 1,
1, 2, 5, 1, 1, 5, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 3, 1, 1, 3, 1, 5, 1, 8, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 6, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1,
1, 1, 1, 6, 1, 9, 5, 3, 1, 8, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2,
1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 2, 8, 1, 1, 1, 6, 1, 1, 1, 1, 9, 1, 1, 1),
Classe = c("Ruim",
"Ruim", "Ruim", "Boa", "Ruim", "Ruim", "Boa", "Boa", "Boa", "Ruim",
"Ruim", "Boa", "Ruim", "Ruim", "Boa", "Ruim", "Ruim", "Ruim",
"Ruim", "Ruim", "Boa", "Boa", "Ruim", "Ruim", "Boa", "Ruim",
"Ruim", "Ruim", "Boa", "Boa", "Ruim", "Ruim", "Boa", "Boa", "Ruim",
"Ruim", "Ruim", "Boa", "Ruim", "Ruim", "Boa", "Ruim", "Ruim",
"Ruim", "Boa", "Ruim", "Ruim", "Boa", "Boa", "Ruim", "Boa", "Ruim",
"Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Boa",
"Boa", "Boa", "Boa", "Boa", "Ruim", "Ruim", "Ruim", "Ruim", "Ruim",
"Boa", "Ruim", "Boa", "Boa", "Ruim", "Ruim", "Ruim", "Ruim",
"Ruim", "Ruim", "Ruim", "Boa", "Ruim", "Boa", "Boa", "Ruim",
"Boa", "Boa", "Boa", "Ruim", "Ruim", "Boa", "Ruim", "Ruim", "Ruim",
"Ruim", "Ruim", "Ruim", "Boa", "Boa", "Boa", "Ruim", "Ruim",
"Boa", "Ruim", "Ruim", "Ruim", "Ruim", "Boa", "Boa", "Boa", "Ruim",
"Ruim", "Ruim", "Ruim", "Ruim", "Boa", "Ruim", "Ruim", "Ruim",
"Ruim", "Boa", "Ruim", "Boa", "Ruim", "Boa", "Boa", "Boa", "Ruim",
"Ruim", "Boa", "Ruim", "Ruim", "Boa", "Ruim", "Ruim", "Ruim",
"Boa", "Boa", "Boa", "Ruim", "Ruim", "Ruim", "Boa", "Ruim", "Ruim",
"Boa", "Boa", "Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Ruim",
"Boa", "Ruim", "Ruim", "Ruim", "Boa", "Ruim", "Ruim", "Ruim",
"Ruim", "Ruim", "Ruim", "Boa", "Boa", "Ruim", "Ruim", "Ruim",
"Ruim", "Ruim", "Boa", "Boa", "Boa", "Ruim", "Boa", "Boa", "Ruim",
"Boa", "Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Boa", "Ruim",
"Ruim", "Ruim", "Boa", "Boa", "Ruim", "Ruim", "Boa", "Ruim",
"Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Ruim",
"Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Ruim",
"Boa", "Boa", "Ruim", "Boa", "Ruim", "Ruim", "Boa", "Ruim", "Boa",
"Ruim", "Boa", "Ruim", "Boa", "Ruim", "Boa", "Ruim", "Ruim",
"Boa", "Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Boa", "Ruim",
"Boa", "Boa", "Ruim", "Ruim", "Boa", "Boa", "Ruim", "Ruim", "Ruim",
"Boa", "Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Boa",
"Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Boa", "Ruim", "Boa",
"Ruim", "Ruim", "Boa", "Ruim", "Ruim", "Boa", "Boa", "Boa", "Boa",
"Boa", "Ruim", "Boa", "Ruim", "Ruim", "Ruim", "Boa", "Ruim",
"Boa", "Boa", "Ruim", "Boa", "Boa", "Ruim", "Ruim", "Ruim", "Ruim",
"Ruim", "Boa", "Boa", "Ruim", "Boa", "Ruim", "Ruim", "Ruim",
"Ruim", "Boa", "Ruim", "Ruim", "Ruim", "Boa", "Boa", "Boa", "Ruim",
"Ruim", "Ruim", "Boa", "Ruim", "Ruim", "Ruim", "Ruim", "Ruim",
"Ruim", "Ruim", "Boa", "Ruim", "Ruim", "Ruim", "Boa", "Ruim",
"Boa", "Ruim", "Boa", "Boa", "Boa", "Ruim", "Ruim", "Ruim", "Ruim",
"Ruim", "Ruim", "Ruim", "Ruim", "Boa", "Boa", "Boa", "Ruim",
"Boa", "Ruim", "Boa", "Ruim", "Boa", "Ruim", "Ruim", "Ruim",
"Ruim", "Boa", "Ruim", "Ruim", "Ruim", "Boa", "Ruim", "Boa",
"Ruim", "Ruim", "Boa", "Ruim", "Ruim", "Ruim", "Ruim", "Boa",
"Ruim", "Ruim", "Boa", "Ruim", "Ruim", "Boa", "Ruim", "Boa",
"Ruim", "Boa", "Ruim", "Ruim", "Boa", "Ruim", "Ruim", "Ruim",
"Boa", "Ruim", "Ruim", "Ruim", "Ruim", "Boa", "Ruim", "Boa",
"Ruim", "Boa", "Boa", "Ruim", "Boa", "Ruim", "Ruim", "Boa", "Ruim",
"Ruim", "Boa", "Boa", "Ruim", "Boa", "Boa", "Ruim", "Boa", "Boa",
"Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Boa", "Ruim",
"Ruim", "Ruim", "Ruim", "Boa", "Ruim", "Boa", "Ruim", "Boa",
"Boa", "Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Boa", "Ruim",
"Ruim", "Ruim", "Ruim", "Ruim", "Boa", "Ruim", "Ruim", "Ruim",
"Boa", "Ruim", "Ruim", "Ruim", "Boa", "Ruim", "Ruim", "Ruim",
"Ruim", "Boa", "Ruim", "Ruim", "Ruim", "Ruim", "Boa", "Ruim",
"Boa", "Ruim", "Ruim", "Ruim", "Boa", "Ruim", "Ruim", "Ruim",
"Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Boa", "Ruim", "Boa",
"Boa", "Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Ruim",
"Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Boa", "Ruim", "Ruim",
"Boa", "Ruim", "Boa", "Ruim", "Ruim", "Ruim", "Boa", "Boa", "Ruim",
"Ruim", "Boa", "Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Boa",
"Boa", "Boa", "Boa", "Boa", "Boa", "Boa", "Ruim", "Ruim", "Ruim",
"Ruim", "Ruim", "Boa", "Ruim", "Boa", "Ruim", "Ruim", "Boa",
"Ruim", "Ruim", "Ruim", "Ruim", "Boa", "Ruim", "Boa", "Ruim",
"Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Boa", "Ruim", "Ruim",
"Boa", "Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Boa",
"Boa", "Ruim", "Ruim", "Ruim", "Boa", "Ruim", "Boa", "Boa", "Ruim",
"Boa", "Boa", "Ruim", "Boa", "Boa", "Boa", "Boa", "Ruim", "Ruim",
"Ruim", "Boa", "Ruim", "Ruim", "Boa", "Boa", "Ruim", "Boa", "Ruim",
"Ruim", "Boa", "Ruim", "Boa", "Boa", "Boa", "Ruim", "Boa", "Ruim",
"Ruim", "Ruim", "Boa", "Ruim", "Ruim", "Boa", "Ruim", "Boa",
"Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Boa", "Ruim", "Ruim",
"Ruim", "Ruim", "Ruim", "Boa", "Ruim", "Ruim", "Ruim", "Ruim",
"Ruim", "Ruim", "Boa", "Boa", "Boa", "Ruim", "Boa", "Ruim", "Boa",
"Ruim", "Boa", "Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Boa",
"Ruim", "Ruim", "Ruim", "Ruim", "Boa", "Boa", "Ruim", "Ruim",
"Ruim", "Ruim", "Ruim", "Boa", "Ruim", "Ruim", "Ruim", "Boa",
"Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Ruim", "Boa", "Ruim",
"Ruim", "Boa", "Ruim", "Boa", "Boa", "Boa", "Boa", "Boa", "Boa",
"Ruim", "Boa", "Ruim", "Ruim", "Ruim", "Ruim", "Boa", "Ruim",
"Ruim", "Boa", "Ruim", "Ruim", "Ruim", "Boa", "Boa", "Ruim",
"Ruim", "Ruim", "Boa", "Boa", "Ruim", "Boa", "Ruim", "Ruim",
"Boa", "Boa", "Boa", "Ruim", "Ruim", "Ruim", "Boa", "Ruim", "Ruim",
"Ruim", "Ruim", "Ruim", "Boa", "Ruim", "Boa", "Ruim", "Boa",
"Ruim", "Ruim", "Boa", "Ruim", "Boa", "Boa", "Boa", "Ruim"))
#Converte variavel resposta para factor
dados$Classe <- factor(dados$Classe, levels = c('Ruim','Boa'))
library(dplyr)
#Pequena analisa exploratoria
dados %>% group_by(Classe) %>% summarise_all("mean")
fit <- glm(Classe ~ Prova_Logica + Redacao + Auto_Avaliacao ,
data = dados,
family = binomial)
#Visualiza resumo do modelo ajustado
summary(fit)
#Aplica exponenciacao nos coeficientes para interpretar
exp(fit$coefficients)
#Curva ROC
prob = predict(fit, newdata = dados, type = "response")
roc = roc(dados$Classe ~ prob, plot = TRUE, print.auc = TRUE)
#Obtem a predicao/probabilidade para cada observacao
Probabilidade <- predict(fit, newdata= dados,type = 'response')
#Se a probabilidade for maior que 50% classifica como 'Boa'
Classe_Predita <- ifelse(Probabilidade > 0.5,"Boa","Ruim")
#Visualiza data frame com as predicoes
View(data.frame(dados,Probabilidade,Classe_Predita))
#Gera matriz de confusao
confusao <- table(Classe_Predita = Classe_Predita, Classe_Original =
relevel(dados$Classe,ref = 'Boa'))
#Armazena valores da matriz de confusao
vp <- confusao[1,1];vp
fn <- confusao[2,1];fn
vn <- confusao[2,2];vn
fp <- confusao[1,2];fp
#Calcula acuracia
acuracia <- sum(diag(confusao))/ sum(confusao);acuracia
#Calcula Sensitividade
sensitividade <- vp /(vp+fn)
#Cacula Especificidade
especificidade <- vn / (vn + fp)
#Analise de Sensitividade e Especificidade
limiares <- sort(Probabilidade)
acuracia <- c()
sensitividade <- c()
especificidade <- c()
for ( i in 1:length(limiares)) {
limiar_atual <- limiares[i]
Classe_Predita <- ifelse(Probabilidade > limiar_atual,'Boa' , 'Ruim')
#Gera matriz de confusao
confusao <- table(Classe_Predita = Classe_Predita, Classe_Original =
relevel(dados$Classe,ref = 'Boa'))
#Armazena valores da matriz de confusao
vp <- confusao[1,1];vp
fn <- confusao[2,1];fn
vn <- confusao[2,2];vn
fp <- confusao[1,2];fp
#Calcula acuracia
acuracia[i] <- sum(diag(confusao))/ sum(confusao);acuracia
#Calcula Sensitividade
sensitividade[i] <- vp /(vp+fn)
#Calcula Especificidade
especificidade[i] <- vn / (vn + fp)
}
plot(y = sensitividade[1:698] , x = limiares[1:698], type="l", col="red", ylab = 'Sensitividade e
Especificidade', xlab= 'Pontos de Corte')
grid()
lines(y = especificidade[1:698], x = limiares[1:698], type = 'l',col="blue" )
legend("bottomleft", c("sensibilidade","especificidade"),
col=c("red","blue"), lty=c(1,1),bty="n", cex=1, lwd=1)
abline(v=0.225)
#Obtem novamente as probabilidades para classificar baseado no ponto de corte 22,5%
Probabilidade <- predict(fit, newdata= dados,type = 'response')
Classe_Predita <- ifelse(Probabilidade > 0.225,"Boa","Ruim")
View(data.frame(dados,Probabilidade,Classe_Predita))
#Visualiza matriz de confusao final
confusao <- table(Classe_Predita = Classe_Predita, Classe_Original =
relevel(dados$Classe,ref = 'Boa'))
#Armazena valores da matriz de confusao
vp <- confusao[1,1];vp
fn <- confusao[2,1];fn
vn <- confusao[2,2];vn
fp <- confusao[1,2];fp
#Calcula acuracia
acuracia <- sum(diag(confusao))/ sum(confusao);acuracia
#Calcula Sensitividade
sensitividade <- vp /(vp+fn)
#Cacula Especificidade
especificidade <- vn / (vn + fp)
rm(list = ls()) #Limpa memória do R
dados <- data.frame(
Preco = c(368.384514890573, 446.850186825816,
414.72765691978, 434.291090918223, 436.652686535348, 457.65797344255,
490.694346597566, 474.881781399868, 458.462395897205, 412.719412673294,
448.799032112411, 352.040747235864, 449.461858221104, 416.150953927119,
416.499426750268, 551.315803331779, 462.126789471159, 515.957335395508,
467.598697162974, 339.548470369391),
Portas = c("duas_portas", "quatro_portas", "duas_portas", "quatro_portas", "quatro_portas",
"duas_portas", "quatro_portas", "duas_portas", "quatro_portas",
"duas_portas", "quatro_portas", "quatro_portas", "duas_portas",
"quatro_portas", "duas_portas", "quatro_portas", "quatro_portas",
"duas_portas", "quatro_portas", "quatro_portas"),
Ar_Condicionado = c("sem_ar_condicionado",  "com_ar_condicionado", "com_ar_condicionado", "com_ar_condicionado",
"com_ar_condicionado", "com_ar_condicionado", "com_ar_condicionado",
"com_ar_condicionado", "com_ar_condicionado", "com_ar_condicionado",
"com_ar_condicionado", "sem_ar_condicionado", "com_ar_condicionado",
"com_ar_condicionado", "com_ar_condicionado", "com_ar_condicionado",
"com_ar_condicionado", "com_ar_condicionado", "com_ar_condicionado",
"sem_ar_condicionado"),
Quadrimestre = c("segundo_quadrimestre","segundo_quadrimestre", "segundo_quadrimestre", "segundo_quadrimestre",
"segundo_quadrimestre", "terceiro_quadrimestre", "primeiro_quadrimestre",
"primeiro_quadrimestre", "terceiro_quadrimestre", "segundo_quadrimestre",
"terceiro_quadrimestre", "segundo_quadrimestre", "terceiro_quadrimestre",
"segundo_quadrimestre", "segundo_quadrimestre", "primeiro_quadrimestre",
"terceiro_quadrimestre", "primeiro_quadrimestre", "primeiro_quadrimestre",
"segundo_quadrimestre"),
Idade_Locatario = c(23, 18, 28, 21, 18, 21, 18, 20, 25, 29, 18, 33, 20, 21, 18, 21, 18, 20, 25, 29),
Quilometragem = c(957.442780544097, 829.533278217768, 923.300215829467, 871.519116905113, 930.704105677958, 554.696695914233, 501.941059782271,
665.435074822519, 568.24079543466, 930.704105677958, 554.696695914233,
829.533278217768, 665.435074822519, 871.519116905113, 930.704105677958,
351.547138218644, 501.941059782271, 447.872006186523, 568.24079543466,
930.704105677958),
Dolar = c(4.41147933990862, 5.63014407874318,
8.80557934010615, 4.260591319988649, 6.93416279643155, 1.61130694543154,
2.57813244655973, 4.66666728709914, 1.6846066723224, 7.33872353619711,
4.52300814589177, 2.96689816205009, 9.91448182957733, 8.55577847959413,
5.93424935955983, 5.55775429484673, 6.94475470863839, 4.74330294976712,
4.723306965757987, 4.7010894862212))
View(dados)
#Histograma do preco
hist(dados$Preco)
#Boxplot do preco
boxplot(dados$Preco)
#Estatisticas descritivas do preco
summary(dados$Preco)
#Boxplot entre o Preco e Quadrimestre
boxplot(dados$Preco~ dados$Quadrimestre)
#Realiza analise de variancia
anova <- aov(Preco ~ Quadrimestre, data = dados)
summary(anova)
boxplot(dados$Preco ~ dados$Portas)
#Test t de Student
t.test(dados$Preco ~ dados$Portas ,
paired = FALSE, #amostras nao pareadas
alternative = 'two.sided', #bilateral
conf.level = 0.95 #95% de confianca
)
plot(y = dados$Preco ,
x = dados$Quilometragem,
pch = 16)
#Coeficiente de correlacao
cor(dados$Preco, dados$Quilometragem)
#Ajuste regressao linear do Preco em funcao da Quilometragem
regressao_linear <- lm(Preco ~ Quilometragem, data = dados)
summary(regressao_linear)
#Analise descritiva da variavel quilometragem
summary(dados$Quilometragem)
#Coeficiente de variacao
sd(dados$Quilometragem) / mean(dados$Quilometragem)
#Explore a correlacao entre o Dolar e o Preco
plot(y = dados$Preco,
x = dados$Dolar,
pch = 16)
cor(dados$Preco, dados$Dolar)
regressao_linear <- lm(Preco ~ Dolar, data = dados)
summary(regressao_linear)
rm(list = ls())
dados <- data.frame(
Consumo = c(2595, 8470, 4007, 6734, 33628, 3903,
13444, 12560, 31176, 5435, 26736, 3728, 8684, 8356, 36936, 3744,
30420, 5958, 1019, 11688, 4442, 2640, 23888, 25844, 7430, 10276,
3381, 3512, 4957),
Estado_Civil = c("Divorciado", "Casado", "Divorciado",
"Casado", "Solteiro", "Divorciado", "Solteiro", "Solteiro", "Solteiro",
"Casado", "Solteiro", "Divorciado", "Solteiro", "Solteiro", "Solteiro",
"Divorciado", "Solteiro", "Divorciado", "Divorciado", "Solteiro",
"Casado", "Solteiro", "Solteiro", "Solteiro", "Casado", "Solteiro",
"Casado", "Casado", "Casado"),
Genero = c("Feminino", "Feminino",
"Masculino", "Feminino", "Feminino", "Feminino", "Feminino",
"Feminino", "Feminino", "Masculino", "Masculino", "Masculino",
"Feminino", "Feminino", "Masculino", "Masculino", "Feminino",
"Masculino", "Feminino", "Feminino", "Masculino", "Masculino",
"Masculino", "Masculino", "Masculino", "Feminino", "Feminino",
"Masculino", "Feminino"),
Idade = c(20.2585750236176, 32.1118436595569,
31.7467633607352, 37.8198500301827, 71.2083039792698, 29.7176362875943,
44.8093915220787, 35.8376118862763, 58.8385574663313, 39.9177951271474,
58.0550560477448, 21.778210059274, 31.7467633607352, 37.8198500301827,
71.2083039792698, 18.2385329827666, 61.5387187691615, 35.8376118862763,
20.2585750236176, 39.9177951271474, 37.9148802474609, 23.3568492662162,
54.9958059606044, 61.2973920327649, 34.58738731516, 29.7176362875943,
19.2584996796213, 20.2585750236176, 37.8080561311484),
Renda_Mensal = c(1985.88181437971,3769.2479179441, 2291.88059431382, 2390.40280655742, 8534.7173298783,
2495.88975635737, 5714.55454591117, 5832.6343267674, 6882.89867212748,
2099.31900110052, 6342.50934129081, 1941.14793399086, 3575.98064224822,
3589.23716442208, 8534.7173298783, 2740.46957610393, 5714.55454591117,
2390.40280655742, 1635.64603350165, 4364.56455252666, 1905.53820715893,
2338.3086884437, 5832.6343267674, 6882.89867212748, 3842.53578942318,
4919.14670791015, 2063.01440787432, 2380.55793401061, 1985.88181437971),
Possui_Imovel_Proprio = c("Sim", "Sim", "Nao", "Sim", "Nao",
"Nao", "Nao", "Sim", "Sim", "Nao", "Nao", "Nao", "Nao", "Nao",
"Nao", "Sim", "Nao", "Sim", "Nao", "Nao", "Nao", "Sim", "Sim",
"Nao", "Nao", "Nao", "Nao", "Nao", "Nao")
)
View(dados)
#Histograma do consumo
hist(dados$Consumo)
#Boxplot do consumo
boxplot(dados$Consumo)
#Estatisticas descritivas do consumo
summary(dados$Consumo)
#Gera tabela de contigencia entre Estado Civil e Possui Imovel Proprio
tabela_contigencia <- table(dados$Estado_Civil, dados$Possui_Imovel_Proprio)
tabela_contigencia
plot(tabela_contigencia)
#Realiza  teste qui-quadrado
chisq.test(tabela_contigencia) #ignore a mensagem de warning de vermelho
boxplot(dados$Consumo ~ dados$Possui_Imovel_Proprio)
#Test t de Student
t.test(dados$Consumo ~ dados$Possui_Imovel_Proprio ,
paired = FALSE, #amostras nao pareadas
alternative = 'two.sided', #bilateral
conf.level = 0.95 #95% de confianca
)
plot(y = dados$Consumo ,
x = dados$Idade,
pch = 16)
#Coeficiente de correlacao
cor(dados$Consumo, dados$Idade)
#Ajuste regressao linear do Consumo em funcao da Idade
regressao_linear <- lm(Consumo ~ Idade, data = dados)
summary(regressao_linear)
#Teste de normalidade para os residuos da regressao
shapiro.test(regressao_linear$residuals)
#Explore a variavel Renda Mensal
summary(dados$Renda_Mensal)
#Regressao linear do Consumo em funcao da Idade e Renda Mensal
regressao_linear <- lm(Consumo ~ Idade + Renda_Mensal, data = dados)
summary(regressao_linear)
